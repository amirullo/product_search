#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
"""

import requests
import json
import time
from typing import Dict, List

API_BASE_URL = "http://localhost:8000"

def test_health():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: {data['status']}")
            print(f"   - –ú–æ–¥–µ–ª—å: {data['components']['model']}")
            print(f"   - Elasticsearch: {data['components']['elasticsearch']}")
            print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {data['components']['categories']}")
            return True
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return False

def test_root():
    """–¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API...")
    
    response = requests.get(f"{API_BASE_URL}/")
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ {data['name']} v{data['version']}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {len(data['endpoints'])}")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.status_code}")
        return False

def test_categories():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("\nüìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    response = requests.get(f"{API_BASE_URL}/categories")
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {data['total_categories']}")
        print(f"   –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {data['total_subcategories']}")
        
        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for cat_id, cat_data in list(data['categories'].items())[:2]:
            print(f"   üìÅ {cat_data['name']}:")
            for subcat_id, subcat_data in list(cat_data['subcategories'].items())[:2]:
                synonyms = ', '.join(subcat_data['synonyms'][:3])
                print(f"      - {subcat_data['name']} (—Å–∏–Ω–æ–Ω–∏–º—ã: {synonyms}...)")
        
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status_code}")
        return False

def test_search(query: str, expected_category: str = None, threshold: float = 0.6):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞"""
    print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
    
    payload = {
        "query": query,
        "threshold": threshold,
        "limit": 5
    }
    
    start_time = time.time()
    response = requests.post(f"{API_BASE_URL}/search", json=payload)
    response_time = time.time() - start_time
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {data['total']}")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {data['processing_time']:.3f}—Å (–∑–∞–ø—Ä–æ—Å: {response_time:.3f}—Å)")
        
        if data['results']:
            print("   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for i, result in enumerate(data['results'][:3], 1):
                score_percent = int(result['score'] * 100)
                method_emoji = {
                    'exact': 'üéØ',
                    'synonym': 'üîÑ', 
                    'semantic': 'üß†',
                    'elasticsearch': 'üîç'
                }
                emoji = method_emoji.get(result['method'], '‚ùì')
                print(f"   {i}. {emoji} {result['category']} ‚Üí {result['subcategory']} ({score_percent}%, {result['method']})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if expected_category:
                found_categories = [r['subcategory'].lower() for r in data['results']]
                if expected_category.lower() in found_categories:
                    print(f"   ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{expected_category}' –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    print(f"   ‚ö†Ô∏è  –û–∂–∏–¥–∞–µ–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{expected_category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("   ü§∑‚Äç‚ôÇÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
        try:
            error_data = response.json()
            print(f"   –î–µ—Ç–∞–ª–∏: {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        except:
            print(f"   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        return False

def test_stats():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    response = requests.get(f"{API_BASE_URL}/stats")
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
        print(f"   - –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {data['total_categories']}")
        print(f"   - –ú–æ–¥–µ–ª—å: {data['model_name']}")
        print(f"   - Elasticsearch: {'‚úÖ' if data['elasticsearch_available'] else '‚ùå'}")
        print(f"   - –ú–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞: {', '.join(data['supported_methods'])}")
        print(f"   - –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {data.get('total_searches', 'N/A')}")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
        return False

def run_performance_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    test_queries = [
        "—à–ø–∞–∫–ª–µ–≤–∫–∞", "–∫–∞—Ñ–µ–ª—å", "—ç–º–∞–ª—å", "–ª–∞–º–∏–Ω–∞—Ç", "–æ–±–æ–∏",
        "–ª–∏–Ω–æ–ª–µ—É–º", "–∫–µ—Ä–∞–º–æ–≥—Ä–∞–Ω–∏—Ç", "–≤–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–∫–∞"
    ]
    
    times = []
    successful = 0
    
    for query in test_queries:
        payload = {"query": query, "threshold": 0.6, "limit": 3}
        
        start_time = time.time()
        response = requests.post(f"{API_BASE_URL}/search", json=payload)
        request_time = time.time() - start_time
        
        if response.status_code == 200:
            data = response.json()
            times.append(data['processing_time'])
            successful += 1
            print(f"   {query}: {data['processing_time']:.3f}—Å ({len(data['results'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")
        else:
            print(f"   {query}: ‚ùå –æ—à–∏–±–∫–∞")
    
    if times:
        avg_time = sum(times) / len(times)
        min_time = min(times)
        max_time = max(times)
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful}/{len(test_queries)}")
        print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.3f}—Å")
        print(f"   - –ú–∏–Ω/–ú–∞–∫—Å –≤—Ä–µ–º—è: {min_time:.3f}—Å / {max_time:.3f}—Å")
        print(f"   - –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ~{1/avg_time:.1f}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞\n")
    
    # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    if not test_health():
        return
    
    test_root()
    test_categories()
    test_stats()
    
    print("\n" + "="*50)
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê")
    print("="*50)
    
    # –¢–µ—Å—Ç—ã –ø–æ–∏—Å–∫–∞
    test_cases = [
        ("—à–ø–∞–∫–ª–µ–≤–∫–∞", "–®–ø–∞—Ç–ª–µ–≤–∫–∞", 0.6),    # –°–∏–Ω–æ–Ω–∏–º
        ("–∫–∞—Ñ–µ–ª—å", "–ü–ª–∏—Ç–∫–∞", 0.6),          # –°–∏–Ω–æ–Ω–∏–º
        ("—ç–º–∞–ª—å", "–ö—Ä–∞—Å–∫–∞", 0.6),           # –°–∏–Ω–æ–Ω–∏–º  
        ("–≤–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–∫–∞", "–ö—Ä–∞—Å–∫–∞", 0.6), # –ñ–∞—Ä–≥–æ–Ω
        ("–Ω–∞–ø–æ–ª—å–Ω—ã–µ –ø–∞–Ω–µ–ª–∏", "–õ–∞–º–∏–Ω–∞—Ç", 0.5), # –°–µ–º–∞–Ω—Ç–∏–∫–∞
        ("–∫–µ—Ä–∞–º–æ–≥—Ä–∞–Ω–∏—Ç", "–ü–ª–∏—Ç–∫–∞", 0.6),    # –°–∏–Ω–æ–Ω–∏–º
        ("–º–∞–ª—è—Ä–Ω–∞—è –∫–∏—Å—Ç—å", "–ö–∏—Å—Ç–∏", 0.5),   # –°–µ–º–∞–Ω—Ç–∏–∫–∞
        ("–ª–∏–Ω–æ–ª–∏—É–º", "–õ–∏–Ω–æ–ª–µ—É–º", 0.6),      # –û–ø–µ—á–∞—Ç–∫–∞ + —Ç–æ—á–Ω–æ–µ
        ("–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä", None, 0.6) # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç
    ]
    
    successful_searches = 0
    for query, expected, threshold in test_cases:
        if test_search(query, expected, threshold):
            successful_searches += 1
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    run_performance_test()
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {successful_searches}/{len(test_cases)}")
    print(f"   API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é: {'‚úÖ' if successful_searches >= len(test_cases) - 1 else '‚ö†Ô∏è'}")

if __name__ == "__main__":
    main()